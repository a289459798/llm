syntax = "v1"

type(
    ImageRequest {
        Content string `json:"content"`
        Model string `json:"model,optional,options=DALL-E|GPT-PLUS|StableDiffusion|Midjourney"`
        Number int `json:"number,optional,options=1|2|4"`
        Clarity string `json:"clarity,optional,options=standard|high|superhigh"`
    }

    ImageResponse {
        Url string `json:"url"`
        Task string `json:"task"`
    }

    Pic2picRequest {
        Style string `form:"style"`
    }

    Pic2picTaskRequest {
        task string `form:"task"`
    }

    WatermarkRequest {
        Url string `json:"url"`
        Content string `json:"content"`
        Position string `json:"position"`
        Opacity float32 `json:"opacity"`
        FontSize uint `json:"fontSize"`
        Color string `json:"color"`
    }

    ImageMultiResponse {
        Url []string `json:"url"`
    }

    ImageMultiAsyncResponse {
        Task string `json:"task"`
        Model string `json:"model"`
        Url []string `json:"url"`
    }

    ImageEditRequest {
        Content string `form:"content"`
    }

    PicRepairRequest {
        Image string `json:"image"`
        Scale uint8 `json:"scale,optional,options=1|2"`
    }

    ImageTaskRequest {
        Task string `json:"task"`
        Model string `json:"model"`
    }

    Image2TextRequest {
        Image string `json:"image"`
    }

    PSRequest {
        Image string `json:"image"`
        Content string `json:"content"`
    }

    Image2TextResponse {
        Data string `json:"data"`
    }
)

@server(
    jwt: Auth
    middleware: AuthAndUse
    group: image
)
service tools {
    @handler create
    post /images/create (ImageRequest) returns (ImageResponse)

    @handler createMulti
    post /images/create/multi (ImageRequest) returns (ImageMultiResponse)

    @handler watermark
    post /images/watermark (ImageRequest) returns (ImageResponse)

    @handler edit
    post /images/edit (ImageEditRequest) returns (ImageResponse)

    @handler pic2pic
    post /images/pic2pic (Pic2picRequest) returns (ImageResponse)

    @handler pic2pictask
    get /images/pic2pic/task (Pic2picTaskRequest) returns (ImageResponse)

    @handler old2new
    post /images/pic-repair (PicRepairRequest) returns (ImageMultiResponse)

    @handler image2Text
    post /images/img2text (Image2TextRequest) returns (Image2TextResponse)

    @handler old2newAsync
    post /images/pic-repair-async (PicRepairRequest) returns (ImageMultiAsyncResponse)

    @handler ps
    post /images/ps (PSRequest) returns (ImageMultiAsyncResponse)
}

@server(
    jwt: Auth
    group: image
)
service tools {
    @handler task
    get /images/task (ImageTaskRequest) returns (ImageMultiAsyncResponse)
}